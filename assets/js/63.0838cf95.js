(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{376:function(t,v,_){"use strict";_.r(v);var e=_(25),a=Object(e.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"git-commit"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[t._v("#")]),t._v(" git commit")]),t._v(" "),v("h2",{attrs:{id:"关于git-commit的信息提交规范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关于git-commit的信息提交规范"}},[t._v("#")]),t._v(" 关于"),v("code",[t._v("git commit")]),t._v("的信息提交规范")]),t._v(" "),v("h3",{attrs:{id:"提交格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#提交格式"}},[t._v("#")]),t._v(" 提交格式")]),t._v(" "),v("div",{staticClass:"language-plaintext extra-class"},[v("pre",{pre:!0,attrs:{class:"language-plaintext"}},[v("code",[t._v("<类型>[可选范围]: <主题>\n[空行]\n[正文]\n[空行]\n[脚注]\n")])])]),v("p",[t._v("示例：")]),t._v(" "),v("div",{staticClass:"language-plaintext extra-class"},[v("pre",{pre:!0,attrs:{class:"language-plaintext"}},[v("code",[t._v("feat(auth): 添加用户登录功能\n\n新增基于JWT的登录验证逻辑，支持邮箱和手机号登录。\n添加相关单元测试。\n\nCloses #123\nBREAKING CHANGE: 移除旧版API `/login-legacy`\n")])])]),v("h3",{attrs:{id:"相关类型说明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相关类型说明"}},[t._v("#")]),t._v(" 相关类型说明")]),t._v(" "),v("ol",[v("li",[v("code",[t._v("feat")]),t._v(": 新增功能")]),t._v(" "),v("li",[v("code",[t._v("fix")]),t._v(": 修复问题/Bug")]),t._v(" "),v("li",[v("code",[t._v("docs")]),t._v(": 文档更新，如"),v("code",[t._v("README")])]),t._v(" "),v("li",[v("code",[t._v("style")]),t._v(": 代码格式调整，不改变逻辑")]),t._v(" "),v("li",[v("code",[t._v("refactor")]),t._v(": 代码重构，既非新增功能，也非修复Bug")]),t._v(" "),v("li",[v("code",[t._v("test")]),t._v(": 添加或者修改测试用例")]),t._v(" "),v("li",[v("code",[t._v("chore")]),t._v(": 构建/工具/依赖变更，如更新依赖，修改CI配置")]),t._v(" "),v("li",[v("code",[t._v("perf")]),t._v(": 性能优化")]),t._v(" "),v("li",[v("code",[t._v("ci")]),t._v(": 持续集成相关修改")]),t._v(" "),v("li",[v("code",[t._v("build")]),t._v(": 构建系统或者外部依赖变更，如"),v("code",[t._v("webpack")]),t._v("或者"),v("code",[t._v("Gulp")])]),t._v(" "),v("li",[v("code",[t._v("revert")]),t._v(": 回滚某次提交")])]),t._v(" "),v("p",[v("strong",[t._v("范围（Scope，可选）")]),t._v("\n说明影响的具体模块（如 feat(login): ...、fix(api): ...）。")]),t._v(" "),v("p",[t._v("团队可自定义范围（如组件名、功能模块）。")]),t._v(" "),v("p",[v("strong",[t._v("主题（Subject）")]),t._v("\n简明扼要描述修改内容，使用祈使语气（如“添加”而非“添加了”）。")]),t._v(" "),v("p",[t._v("首字母小写，结尾无标点。")]),t._v(" "),v("p",[t._v("正文（Body，可选）\n详细描述修改的动机、实现细节或与之前行为的对比。")]),t._v(" "),v("p",[t._v("每行不超过 72 字符，段落间用空行分隔。")]),t._v(" "),v("p",[v("strong",[t._v("脚注（Footer，可选）")]),t._v("\n关联 Issue：如 Closes #123、Fixes #45。")]),t._v(" "),v("p",[t._v("破坏性变更：用 BREAKING CHANGE: 开头，说明不兼容变动。")]),t._v(" "),v("h3",{attrs:{id:"工具支持"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工具支持"}},[t._v("#")]),t._v(" 工具支持")]),t._v(" "),v("ul",[v("li",[t._v("Commitlint: 校验提交信息是否符合规范。")]),t._v(" "),v("li",[t._v("Commitizen: 交互式生成规范提交信息。")]),t._v(" "),v("li",[t._v("Husky: 通过 Git Hook 强制检查提交信息。")]),t._v(" "),v("li",[t._v("Standard Version: 自动生成 CHANGELOG 和版本号。")])])])}),[],!1,null,null,null);v.default=a.exports}}]);